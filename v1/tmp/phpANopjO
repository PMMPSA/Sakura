main: aliuly\helper\Main
api: 1.12.0
load: POSTWORLD
depend: [SimpleAuth]

name: SimpleAuthHelper
description: Simplifies the way people authenticate to servers
version: 2.0.1
author: aliuly

commands:
  chpwd:
    description: "Change password"
    usage: "/chpwd <old_password>"
    permission: simpleauthhelper.command.chpwd
    aliases: [passwd]
  resetpwd:
    description: "Reset password"
    usage: "/resetpwd <player>"
    permission: simpleauthhelper.command.resetpwd
    aliases: [resetpw]
  preregister:
    description: "pre-register player"
    usage: "/preregister <player> <passwd>"
    permission: simpleauthhelper.command.prereg
    aliases: [prereg]
  logout:
    description: "logout player"
    usage: "/logout"
    permission: simpleauthhelper.command.logout

permissions:
  simpleauthhelper.command.chpwd:
    default: true
    description: "Allow users to change passwords"
  simpleauthhelper.command.logout:
    default: true
    description: "Allow users to logout"
  simpleauthhelper.command.resetpwd:
    default: op
    description: "Allow ops to reset other's passwords"
  simpleauthhelper.command.prereg:
    default: op
    description: "Allow ops to pre-register users"
<?php
/**
 **
 ** CONFIG:main
 **
 ** Configure the different features used by this plugin.
 **
 **    feature: true|false
 **
 ** If `true` the feature is enabled.  if `false` the feature is disabled.
 **
 **
 **/
namespace aliuly\helper;

use pocketmine\plugin\PluginBase;
use pocketmine\event\Listener;
use pocketmine\utils\TextFormat;
use pocketmine\event\player\PlayerCommandPreprocessEvent;
use pocketmine\event\player\PlayerQuitEvent;
use pocketmine\event\player\PlayerJoinEvent;
use pocketmine\command\CommandExecutor;
use pocketmine\command\ConsoleCommandSender;
use pocketmine\command\CommandSender;
use pocketmine\command\Command;
use pocketmine\item\Item;
use pocketmine\utils\Config;
use pocketmine\Player;

use SimpleAuth\event\PlayerAuthenticateEvent;

use aliuly\helper\common\PluginCallbackTask;
use aliuly\helper\common\mc;
use aliuly\helper\common\MPMU;

use aliuly\helper\EventListener;
use aliuly\helper\PermsHacker;
use aliuly\helper\DbMonitorTask;

class Main extends PluginBase implements Listener,CommandExecutor {
	const RE_REGISTER = '/^\s*\/register\s+/';
	const RE_LOGIN = '/^\s*\/login\s+/';

	public $auth;
	protected $pwds;
	protected $chpwd;
	protected $cfg;
	protected $listener;
	protected $permshacker;
	protected $monitor;

	public function onEnable(){

		if (!is_dir($this->getDataFolder())) mkdir($this->getDataFolder());
		if (mc::plugin_init($this,$this->getFile()) === false) {
			file_put_contents($this->getDataFolder()."messages.ini",MPMU::getResourceContents($this,"messages/eng.ini")."\n\"<nagme>\"=\"yes\"\n");
			mc::plugin_init($this,$this->getFile());
			$this->getLogger()->error(TextFormat::RED."Your selected language \"".$this->getServer()->getProperty("settings.language")."\" is not supported");
			$this->getLogger()->error(TextFormat::YELLOW."Creating a custom \"messages.ini\" with English strings");
			$this->getLogger()->error(TextFormat::AQUA."Please consider translating and submitting a translation");
			$this->getLogger()->error(TextFormat::AQUA."to the developer");
		} else {
			if (mc::_("<nagme>") === "yes") {
				$this->getLogger()->error(TextFormat::RED."Your selected language \"".$this->getServer()->getProperty("settings.language")."\" is not supported");
				$this->getLogger()->error(TextFormat::AQUA."Please consider translating \"messages.ini\"");
				$this->getLogger()->error(TextFormat::AQUA."and submitting a translation to the  developer");
			}
		}
		$this->auth = $this->getServer()->getPluginManager()->getPlugin("SimpleAuth");
		if (!$this->auth) {
			$this->getLogger()->error(TextFormat::RED.mc::_("Unable to find SimpleAuth"));
			throw new \RuntimeException("Missing Dependancy");
			return;
		}

		$defaults = [
			"version" => $this->getDescription()->getVersion(),
			"# max-attemps" => "kick player after this many login attempts. ",// NOTE: This conflicts with SimpleAuth's blockAfterFail setting
			"max-attempts" => 5,
			"# login-timeout" => "must authenticate within this number of seconds",
			"login-timeout" => 60,
			"# leet-mode" => "lets players use also /login and /register",
			"leet-mode" => true,
			"# chat-protect" => "prevent player to display their password in chat",
			"chat-protect" => false,
			"# hide-unauth" => "EXPERIMENTAL, hide unauthenticated players",
			"hide-unauth" => false,
			"# event-fixer" => "EXPERIMENTAL, cancels additional events",// for unauthenticated players
			"event-fixer" => false,
			"# hack-login-perms" => "EXPERIMENTAL, overrides login permisions",//to make sure players can login
			"hack-login-perms" => false,
			"# hack-register-perms" => "EXPERIMENTAL, overrides register permisions",//to make sure players can register
			"hack-register-perms" => false,
			"# db-monitor" => "EXPERIMENTAL, enable database server monitoring",
			"db-monitor" => false,
			"# monitor-settings" => "Configure database monitor settings",
			"monitor-settings" => DbMonitorTask::defaults(),
		];
		$this->cfg=(new Config($this->getDataFolder()."config.yml",
										  Config::YAML,$defaults))->getAll();

		$this->getServer()->getPluginManager()->registerEvents($this,$this);
		if ($this->cfg["event-fixer"]) {
			$this->listener =new EventListener($this);
		}
		if ($this->cfg["hack-login-perms"] || $this->cfg["hack-register-perms"]) {
			$this->permshacker = new PermsHacker($this,$this->cfg["hack-login-perms"],$this->cfg["hack-register-perms"]);
		}
		if ($this->cfg["db-monitor"]) {
			$this->monitor = new DbMonitorTask($this,$this->cfg["monitor-settings"]);
		}
		$this->pwds = [];
	}
	//////////////////////////////////////////////////////////////////////
	//
	// Event handlers
	//
	//////////////////////////////////////////////////////////////////////
	public function onPlayerQuit(PlayerQuitEvent $ev) {
		$n = $ev->getPlayer()->getName();
		if (isset($this->pwds[$n])) unset($this->pwds[$n]);
		if (isset($this->chpwd[$n])) unset($this->chpwd[$n]);
	}
	public function onPlayerJoin(PlayerJoinEvent $ev) {
		if ($this->cfg["login-timeout"] !== 0) {
			$n = $ev->getPlayer()->getName();
			$this->getServer()->getScheduler()->scheduleDelayedTask(new PluginCallbackTask($this,[$this,"checkTimeout"],[$n]),$this->cfg["login-timeout"]*20);
		}
		if ($this->cfg["hide-unauth"]) {
			$p = $ev->getPlayer();
			foreach($this->getServer()->getOnlinePlayers() as $online){
				$online->hidePlayer($p);
				$p->hidePlayer($online);
			}
			$ev->setJoinMessage("");
			//
		}
	}
	public function onAuthenticate(PlayerAuthenticateEvent $ev) {
		if (!$this->cfg["hide-unauth"]) return;
		$pl = $ev->getPlayer();
		$this->getServer()->broadcastMessage(TextFormat::YELLOW.mc::_("%1% has just joined", $pl->getDisplayName()));
		foreach($this->getServer()->getOnlinePlayers() as $online){
			$online->showPlayer($pl);
			if ($this->auth->isPlayerAuthenticated($online)) {
				$pl->showPlayer($online);
			}
		}
	}
	/**
	 * @priority LOW
	 */
	public function onPlayerCmd(PlayerCommandPreprocessEvent $ev) {
		if ($ev->isCancelled()) return;
		$pl = $ev->getPlayer();
		$n = $pl->getName();
		if ($this->auth->isPlayerAuthenticated($pl) && !isset($this->chpwd[$n])) {
			if ($this->cfg["chat-protect"]) {
				if ($this->authenticate($pl,$ev->getMessage())) {
					$pl->sendMessage(TextFormat::RED.mc::_("chat protected"));
					$ev->setMessage(mc::_("**CENSORED**"));
					$ev->setCancelled();
				}
			}
			return;
		}

		if (!$this->auth->isPlayerRegistered($pl) || isset($this->chpwd[$n])) {
			if (!isset($this->pwds[$n])) {
				if ($this->cfg["leet-mode"] && preg_match(self::RE_REGISTER,$ev->getMessage())) {
					$pl->sendMessage(TextFormat::YELLOW.mc::_("snob register"));
					$ev->setMessage(preg_replace(self::RE_REGISTER,'',$ev->getMessage()));
				}
				if (!$this->checkPwd($pl,$ev->getMessage())) {
					$ev->setCancelled();
					$ev->setMessage("~");
					return;
				}
				$this->pwds[$n] = $ev->getMessage();
				$pl->sendMessage(TextFormat::AQUA.mc::_("re-enter pwd"));
				$ev->setCancelled();
				$ev->setMessage("~");
				return;
			}
			if ($this->pwds[$n] != $ev->getMessage()) {
				unset($this->pwds[$n]);
				$ev->setCancelled();
				$ev->setMessage("~");
				$pl->sendMessage(TextFormat::RED.mc::_("passwords dont match"));
				return;
			}
			if (isset($this->chpwd[$n])) {
				// User is changing password...
				unset($this->chpwd[$n]);
				$ev->setMessage("~");
				$ev->setCancelled();
				$pw = $this->pwds[$n];
				unset($this->pwds[$n]);

				if (!$this->auth->unregisterPlayer($pl)) {
					$pl->sendMessage(TextFormat::RED.mc::_("registration error"));
					return;
				}
				if (!$this->auth->registerPlayer($pl,$pw)) {
					$pl->kick(mc::_("registration error"));
					return;
				}
				$pl->sendMessage(TextFormat::GREEN.mc::_("chpwd ok"));
				return;
			}
			// New user registration...
			if (!$this->auth->registerPlayer($pl,$this->pwds[$n])) {
				$pl->kick(mc::_("registration error"));
				return;
			}
			if (!$this->auth->authenticatePlayer($pl)) {
				$pl->kick(mc::_("auth error"));
				return;
			}
			unset($this->pwds[$n]);
			$ev->setMessage("~");
			$ev->setCancelled();
			$pl->sendMessage(TextFormat::GREEN.mc::_("register ok"));
			return;
		}
		if ($this->cfg["leet-mode"]) {
			$msg = $ev->getMessage();
			if (preg_match(self::RE_LOGIN,$msg)) {
				$pl->sendMessage(TextFormat::YELLOW.mc::_("snob login"));
			} else {
				$ev->setMessage("/login $msg");
			}
		} else {
			$ev->setMessage("/login ".$ev->getMessage());
		}
		if ($this->cfg["max-attempts"] > 0) {
			if (isset($this->pwds[$n])) {
				++$this->pwds[$n];
			} else {
				$this->pwds[$n] = 1;
			}
			$this->getServer()->getScheduler()->scheduleDelayedTask(new PluginCallbackTask($this,[$this,"checkLoginCount"],[$n]),5);
		}
		return;
	}
	public function checkTimeout($n) {
		$pl = $this->getServer()->getPlayer($n);
		if ($pl && !$this->auth->isPlayerAuthenticated($pl)) {
			$pl->kick(mc::_("login timeout"));
		}
	}
	public function checkLoginCount($n) {
		if (!isset($this->pwds[$n])) return;
		$pl = $this->getServer()->getPlayer($n);
		if ($pl && !$this->auth->isPlayerAuthenticated($pl)) {
			if ($this->pwds[$n] >= $this->cfg["max-attempts"]) {
				$pl->kick(mc::_("too many logins"));
				unset($this->pwds[$n]);
			}
			return;
		}
		unset($this->pwds[$n]);
		return;
	}
	public function checkPwd($pl,$pwd, $name = null) {
		if (preg_match('/\s/',$pwd)) {
			$pl->sendMessage(TextFormat::RED.mc::_("no spaces"));
			return false;
		}
		if (strlen($pwd) < $this->auth->getConfig()->get("minPasswordLength")){
			$pl->sendMessage(TextFormat::RED.mc::_("register.error.password %1%",
										  $this->auth->getConfig()->get("minPasswordLength")));
			return false;
		}
		if (strtolower($name === null ? $pl->getName() : $name) == strtolower($pwd)) {
		  $pl->sendMessage(TextFormat::RED.mc::_("not name"));
		  return false;
		}
		return true;
	}
	protected function authenticate($pl,$password) {
		$provider = $this->auth->getDataProvider();
		if (($data = $provider->getPlayer($pl)) === null) {
			return false;
		}
		return hash_equals($data["hash"], $this->hash(strtolower($pl->getName()), $password));
	}

	//////////////////////////////////////////////////////////////////////
	//
	// Commands
	//
	//////////////////////////////////////////////////////////////////////
	private function chpwd(CommandSender $sender, $oldpwd) {
		if (!($sender instanceof Player)) {
			$sender->sendMessage(TextFormat::RED.
										mc::_("This command only works in-game."));
			return true;
		}
		if(!$this->auth->isPlayerRegistered($sender)) {
			$sender->sendMessage(TextFormat::YELLOW.mc::_("register first"));
			return true;
		}
		if ($this->authenticate($sender,$oldpwd)) {
			$this->chpwd[$sender->getName()] = $sender->getName();
			$sender->sendMessage(TextFormat::AQUA.mc::_("chpwd msg"));
			return true;
		}
		$sender->sendMessage(TextFormat::RED.mc::_("chpwd error"));
		return false;
	}
	private function resetpwd($sender, $name) {
		$player = $this->getServer()->getOfflinePlayer($name);
		if($this->auth->unregisterPlayer($player)){
			$sender->sendMessage(TextFormat::GREEN . mc::_("%1% unregistered",$name));
			if($player instanceof Player){
				$player->sendMessage(TextFormat::YELLOW.mc::_("You are no longer registered!"));
				$this->auth->deauthenticatePlayer($player);
			}
		}else{
			$sender->sendMessage(TextFormat::RED . mc::_("Unable to unregister %1%",$name));
		}
		return true;
	}
	private function logout($sender) {
		if (!($sender instanceof Player)) {
			$sender->sendMessage(TextFormat::RED.
										mc::_("This command only works in-game."));
			return true;
		}
		if(!$this->auth->isPlayerAuthenticated($sender)) {
			$sender->sendMessage(TextFormat::YELLOW.mc::_("login first"));
			return true;
		}
		$sender->sendMessage(TextFormat::GREEN.mc::_("logout completed"));
		$this->auth->deauthenticatePlayer($sender);
		return true;
	}
	private function prereg($sender,$name,$newpwd) {
		$player = $this->getServer()->getOfflinePlayer($name);
		if ($this->auth->isPlayerRegistered($player)) {
			$sender->sendMessage(TextFormat::RED.mc::_("%1% already registered", $name));
			return true;
		}
		if (!$this->checkPwd($sender,$newpwd,$name)) return true;
		if ($this->auth->registerPlayer($player,$newpwd)) {
			$sender->sendMessage(TextFormat::GREEN.mc::_("registered %1%", $name));
			$sender->sendMessage("OK");
		} else {
			$sender->sendMessage(TextFormat::RED.mc::_("error registering %1%", $name));
		}
		return true;
	}
	public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) {
		if (!$this->auth) {
			$sender->sendMessage(TextFormat::RED.mc::_("SimpleAuthHelper has been disabled"));
			$sender->sendMessage(TextFormat::RED.mc::_("SimpleAuth not found!"));
			return true;
		}
		switch($cmd->getName()){
			case "chpwd":
				if (count($args) == 0) return false;
				return $this->chpwd($sender, implode(" ", $args));
			case "resetpwd":
				if (count($args) != 1) return false;
				return $this->resetpwd($sender, $args[0]);
			case "logout":
				if (count($args) != 0) return false;
				return $this->logout($sender);
			case "preregister":
				if (count($args) != 2) return false;
				return $this->prereg($sender,$args[0],$args[1]);
		}
		return false;
	}
	/**
	 * COPIED FROM SimpleAuth by PocketMine team...
	 *
	 * Uses SHA-512 [http://en.wikipedia.org/wiki/SHA-2] and Whirlpool [http://en.wikipedia.org/wiki/Whirlpool_(cryptography)]
	 *
	 * Both of them have an output of 512 bits. Even if one of them is broken in the future, you have to break both of them
	 * at the same time due to being hashed separately and then XORed to mix their results equally.
	 *
	 * @param string $salt
	 * @param string $password
	 *
	 * @return string[128] hex 512-bit hash
	 */
	private function hash($salt, $password){
		return bin2hex(hash("sha512", $password . $salt, true) ^ hash("whirlpool", $salt . $password, true));
	}
}
<?php
namespace aliuly\helper\common;

/**
 * Simple translation class in the style of **gettext**.
 *
 * You can actually use **gettext** tools to process these files.
 * For example, to create/update a message catalogue use:
 *
 * `xgettext --no-wrap [-j] [-o file]`
 *
 * Where -j is used to join an existing catalague.
 * -o file is the output file.
 *
 * Basic usage:
 *
 * * mc::load("messages.po|messages.ini");
 * * mc::plugin_init($plugin,$plugin->getFile());
 * * mc::_("string to translate\n")
 * * mc::_("string to translate %1% %2%\n",$arg1,$arg2)
 * * mc::n(mc::\_("singular form"),mc::\_("Plural form"),$count)
 */
abstract class mc {
	/** @var str[] $txt Message translations */
	public static $txt = [];
	/** Main translation function
	 *
	 * This translates strings.  The naming of "_" is to make it compatible
	 * with gettext utilities.  The string can contain "%1%", "%2%, etc...
	 * These are inserted from the following arguments.  Use "%%" to insert
	 * a single "%".
	 *
	 * @param str[] $args - messages
	 * @return str translated string
	 */
	public static function _(...$args) {
		$fmt = array_shift($args);
		if (isset(self::$txt[$fmt])) $fmt = self::$txt[$fmt];
		if (count($args)) {
			$vars = [ "%%" => "%" ];
			$i = 1;
			foreach ($args as $j) {
				$vars["%$i%"] = $j;
				++$i;
			}
			$fmt = strtr($fmt,$vars);
		}
		return $fmt;
	}
	/**
	 * Plural and singular forms.
	 *
	 * @param str $a - Singular form
	 * @param str $b - Plural form
	 * @param int $c - the number to test to select between $a or $b
	 * @return str - Either plural or singular forms depending on the value of $c
	 */
	public static function n($a,$b,$c) {
		return $c == 1 ? $a : $b;
	}
	/**
	 * Load a message file for a PocketMine plugin.  Only uses .ini files.
	 *
	 * @param Plugin $plugin - owning plugin
	 * @param str $path - output of $plugin->getFile()
	 * @return int|false - false on error or the number of messages loaded
	 */
	public static function plugin_init($plugin,$path) {
		if (file_exists($plugin->getDataFolder()."messages.ini")) {
			return self::load($plugin->getDataFolder()."messages.ini");
		}
		$msgs = $path."resources/messages/".
				$plugin->getServer()->getProperty("settings.language").
				".ini";
		if (!file_exists($msgs)) return false;
		return mc::load($msgs);
	}
	/**
	 * Load the specified message catalogue.
	 * Can read .ini or .po files.
	 * @param str $f - Filename to load
	 * @return int|false - returns the number of strings loaded or false on error
	 */
	public static function load($f) {
		$potxt = "\n".file_get_contents($f)."\n";
		if (preg_match('/\nmsgid\s/',$potxt)) {
			$potxt = preg_replace('/\\\\n"\n"/',"\\n",
										 preg_replace('/\s+""\s*\n\s*"/'," \"",
														  $potxt));
		}
		foreach (['/\nmsgid "(.+)"\nmsgstr "(.+)"\n/',
					 '/^\s*"(.+)"\s*=\s*"(.+)"\s*$/m'] as $re) {
			$c = preg_match_all($re,$potxt,$mm);
			if ($c) {
				for ($i=0;$i<$c;++$i) {
					if ($mm[2][$i] == "") continue;
					eval('$a = "'.$mm[1][$i].'";');
					eval('$b = "'.$mm[2][$i].'";');
					mc::$txt[$a] = $b;
				}
				return $c;
			}
		}
		return false;
	}
}
<?php
/**
 ** CONFIG:monitor-settings
 **/
namespace aliuly\helper;

use pocketmine\scheduler\PluginTask;
use pocketmine\event\Listener;
use aliuly\helper\Main as HelperPlugin;
use aliuly\helper\common\mc;
use aliuly\helper\common\PluginCallbackTask;
use pocketmine\utils\TextFormat;
use pocketmine\event\player\PlayerLoginEvent;
use pocketmine\event\player\PlayerJoinEvent;

class DbMonitorTask extends PluginTask implements Listener{
  protected $canary;
  protected $ok;
  protected $dbm;
  protected $fix;

  static public function defaults() {
		return [
      "# canary-account" => "account to query",//this account is tested to check database proper operations
      "canary-account" => "test user",
      "# check-interval" => "how to often to check database (seconds)",
      "check-interval" => 600,
		];
	}
	public function __construct(HelperPlugin $owner,$cfg){
		parent::__construct($owner);
    $this->canary = $cfg["canary-account"];
    if ($owner->auth->isEnabled()) {
      $this->dbm = $owner->auth->getDataProvider();
      $this->ok = true; // Assume things are OK...
      if (!$this->pollDB()) {
        // If this fails then canary account doesn't exist yet... create it
        $player = $this->getOwner()->getServer()->getOfflinePlayer($this->canary);
        if ($player === null) {
          throw new \RuntimeException("canary account definition error!");
          return;
        }
        $err = $this->dbm->registerPlayer($player,"N/A");
        if ($err === null) {
          throw new \RuntimeException("Unable to register canary account!");
        }
      }
    } else {
      $this->ok = false;
    }

    $owner->getServer()->getScheduler()->scheduleRepeatingTask($this,$cfg["check-interval"]*20);
    $owner->getServer()->getPluginManager()->registerEvents($this, $owner);
	}
  private function setStatus($mode) {
    if ($this->ok === $mode) return;
    $this->ok = $mode;
    if ($mode) {
      $this->getOwner()->getLogger()->info(mc::_("Restored database connection"));
      $this->getOwner()->getServer()->broadcastMessage(TextFormat::GREEN.mc::_("Database connectivity restored!"));
      return;
    }
    $this->getOwner()->getLogger()->error(mc::_("LOST DATABASE CONNECTION!"));
    $this->getOwner()->getServer()->broadcastMessage(TextFormat::RED.mc::_("Detected loss of database connectivity!"));
    // Kick all unregistered players...
    $auth = $this->getOwner()->getServer()->getPluginManager()->getPlugin("SimpleAuth");
    if ($auth !== null) {
      $cnt = 0;
      foreach ($this->getOwner()->getServer()->getOnlinePlayers() as $ll) {
        if (!$auth->isPlayerAuthenticated($ll)) {
          $this->delayedKick($ll,mc::_("Database is experiencing technical difficulties"));
          ++$cnt;
        }
      }
      if ($cnt)
        $this->getOwner()->getServer()->broadcastMessage(
          TextFormat::BLUE.
          mc::n(
            mc::_("one unauthenticated player was kicked"),
            mc::_("%1% unauthenticated players were kicked", $cnt),
            $cnt
          )
        );
      return;
    }
  }
  private function enableAuth($mgr,$auth) {
    if ($auth === null) return false; // OK, this is weird!
    if ($auth->isEnabled()) return true;
    $this->getOwner()->getLogger()->info(mc::_("Enabling SimpleAuth"));
    $mgr->enablePlugin($auth);
    if (!$auth->isEnabled()) return false;
    $this->dbm = $auth->getDataProvider();
    return true;
  }
  private function pollDB() {
    $player = $this->getOwner()->getServer()->getOfflinePlayer($this->canary);
    if ($player == null) return true;//Automatically assume things are OK :)
    try {
      return $this->dbm->isPlayerRegistered($player);
    } catch (\Exception $e) {
      $this->getOwner()->getLogger()->error(mc::_("DBM Error: %1%",$e->getMessage()));
    }
    return false;
  }

	public function onRun($currentTicks){
    $mgr = $this->getOwner()->getServer()->getPluginManager();
    $auth = $mgr->getPlugin("SimpleAuth");
    if ($auth === null) return; // OK, this is weird!

    if (!$auth->isEnabled()) {
      if (!$this->enableAuth($mgr,$auth)) return; // Ouch...
    }
    if ($this->pollDB()) {
      $this->setStatus(true);
      return;
    }
    /*
     * Lost connection to database...
     */
    $this->setStatus(false);
    /*
     * let's try to reconnect by resetting SimpleAuth
     */
    if ($auth->isEnabled()) {
      $this->getOwner()->getLogger()->info(mc::_("Disabling SimpleAuth"));
      $mgr->disablePlugin($auth);
    }
    if (!$auth->isEnabled()) {
      $this->getOwner()->getLogger()->info(mc::_("Enabling SimpleAuth"));
      if (!$this->enableAuth($mgr,$auth)) return; // Ouch...
    }
    if ($this->pollDB()) $this->setStatus(true);
	}
  public function doKick($n,$msg) {
    $pl = $this->getOwner()->getServer()->getPlayer($n);
    if ($pl === null) return;
    $pl->kick($msg);
  }
  private function delayedKick($pl,$msg) {
    $this->getOwner()->getServer()->getScheduler()->scheduleDelayedTask(
      new PluginCallbackTask($this->getOwner(),[$this,"doKick"],[$pl->getName(),$msg]),
      10
    );
  }
  public function onConnect(PlayerLoginEvent $ev) {
    $this->onRun(0);
  }
  public function onJoin(PlayerJoinEvent $ev) {
    if ($this->ok) return;
    $this->delayedKick($ev->getPlayer(),mc::_("Database is experiencing technical difficulties"));
  }
}
<?php
namespace aliuly\helper;
/*
 * Mess with permissions to make sure that the player has permissions to
 * register and login
 */
use pocketmine\event\Listener;
use pocketmine\Player;
use aliuly\helper\Main as HelperPlugin;
use pocketmine\event\player\PlayerQuitEvent;
use pocketmine\event\player\PlayerCommandPreprocessEvent;
use aliuly\helper\common\mc;


class PermsHacker implements Listener{
	protected $perms;
	protected $opts;
	protected $helper;
	public function __construct(HelperPlugin $plugin,$login,$register) {
		$this->helper = $plugin;
		$plugin->getServer()->getPluginManager()->registerEvents($this, $plugin);
		$this->opts = [
			"login" => $login,
			"register" => $register,
		];
	}
	private function checkPerm(Player $pl, $perm) {
		if ($pl->hasPermission($perm)) return;
		$n = strtolower($pl->getName());
		$this->helper->getLogger()->warning(mc::_("Fixing %1% for %2%", $perm, $n));
		if (!isset($this->perms[$n])) $this->perms[$n] = $pl->addAttachment($this->helper);
		$this->perms[$n]->setPermission($perm,true);
		$pl->recalculatePermissions();
	}
	public function forcePerms(Player $player) {
		if ($this->helper->auth->isPlayerAuthenticated($player)) {
			$this->resetPerms($player);
			return;
		}
		if ($this->opts["register"] && !$this->helper->auth->isPlayerRegistered($player)) {
			$this->checkPerm($player,"simpleauth.command.register");
			return;
		}
		if ($this->opts["login"])	$this->checkPerm($player,"simpleauth.command.login");
	}
	public function resetPerms(Player $pl) {
		$n = strtolower($pl->getName());
		if (isset($this->perms[$n])) {
			$attach = $this->perms[$n];
			unset($this->perms[$n]);
			$pl->removeAttachment($attach);
			$pl->recalculatePermissions();
		}
	}
	public function onQuit(PlayerQuitEvent $ev) {
		$this->resetPerms($ev->getPlayer());
	}
	public function onCmd(PlayerCommandPreprocessEvent $ev) {
		$this->forcePerms($ev->getPlayer());
	}
}
<?php
namespace aliuly\helper\common;

use pocketmine\scheduler\PluginTask;
use pocketmine\plugin\Plugin;

/**
 * Simple plugin callbacks.
 *
 * Allows the creation of simple callbacks with extra data
 * The last parameter in the callback will be the "currentTicks"
 *
 * Simply put, just do:
 *
 *    new PluginCallbackTask($plugin,[$obj,"method"],[$args])
 *
 * Pass it to the scheduler and off you go...
 */
class PluginCallbackTask extends PluginTask{

	/** @var callable */
	protected $callable;

	/** @var array */
	protected $args;

	/**
	 * @param Plugin   $owner
	 * @param callable $callable
	 * @param array    $args
	 */
	public function __construct(Plugin $owner, callable $callable, array $args = []){
		parent::__construct($owner);
		$this->callable = $callable;
		$this->args = $args;
		$this->args[] = $this;
	}
	/**
	 * @return callable
	 */
	public function getCallable(){
		return $this->callable;
	}

	public function onRun($currentTicks){
		$c = $this->callable;
		$args = $this->args;
		$args[] = $currentTicks;
		$c(...$args);
	}

}
