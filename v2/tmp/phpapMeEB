name: DropParty
author: HotshotHD
version: 1.0.3
description: Schedule DropParties for your server
main: dropparty\DropParty
api: [1.12.0, 1.13.0]
<?php

namespace dropparty;

use pocketmine\plugin\PluginBase;
use dropparty\task\DropItemsTask;
use dropparty\task\DropPartyTask;
use pocketmine\utils\Config;

class DropParty extends PluginBase {
	
	public $secs = 0;
	public $tasks = [];
	public $status;
	public $time;
	
	public function onEnable() {
		$this->getLogger()->info("Has been enabled");
		@mkdir($this->getDataFolder());
		@mkdir($this->getDataFolder() . "config/");
		$this->cfg = (new Config($this->getDataFolder() . "config/" . "config.yml", Config::YAML, array(
		"World" => "world",
		"Time" => 10,
		"Duration" => 60,
		"Message.Started" => "[DropParty] Has started!",
		"Message.Ended" => "[DropParty] Has ended!",
		"Message.Countdown" => "[DropParty] Starting in {time} mins.",
		"Popup.Enabled" => true,
		"Popup.Message" => "[DropParty] Items are dropping!",
		"Coordinates" => [
		"X" => 0,
		"Y" => 0,
		"Z" => 0,
		],
		"Items" => [
		57,
		42,
		22,
		41,
		],
		)))->getAll();
		
		$this->time = $this->cfg["Time"];
		$this->getServer()->getScheduler()->scheduleRepeatingTask(new task\DropPartyTask($this), 20 * 60);
		$this->getServer()->getScheduler()->scheduleRepeatingTask(new task\DropItemsTask($this), 20);
	}
	
	public function config() {
		return $this->cfg;
	}
	
	public function getDropPartyTask() {
		return new DropPartyTask($this);
	}
	
	public function getDropItemsTask() {
		return new DropItemsTask($this);
	}
	
	public function getRandomItem() {
	  $rand = mt_rand(0, count($this->cfg["Items"]) - 1);
		
	  return $this->cfg["Items"][$rand];
		
	}
	
}<?php

namespace dropparty\task;

use pocketmine\scheduler\PluginTask;
use dropparty\DropParty;
use pocketmine\item\Item;
use pocketmine\utils\Config;
use pocketmine\math\Vector3;

class DropPartyTask extends PluginTask {
	
	public function __construct(DropParty $plugin) {
		parent::__construct($plugin);
		$this->plugin = $plugin;
	}
	
	public function getPlugin() {
		return $this->plugin;
	}
	
	public function onRun($currentTick) {
		$msg = str_replace("{time}", $this->getPlugin()->time, $this->getPlugin()->config()["Message.Countdown"]);
		if($this->getPlugin()->time > 0) {
			$this->getPlugin()->getServer()->broadcastMessage($msg);
		}
		
		if($this->getPlugin()->time == 0) {
			$this->getPlugin()->getServer()->broadcastMessage($this->getPlugin()->config()["Message.Started"]);
			$this->getPlugin()->status = "enabled";		
		}
			
		 $this->getPlugin()->time = $this->getPlugin()->time - 1;

		}
		
	}<?php

namespace dropparty\task;

use pocketmine\scheduler\PluginTask;
use pocketmine\item\Item;
use pocketmine\utils\Config;
use pocketmine\math\Vector3;
use dropparty\DropParty;

class DropItemsTask extends PluginTask {
	
	public function __construct(DropParty $plugin) {
		parent::__construct($plugin);
		$this->plugin = $plugin;	
	}
	
	public function getPlugin() {
		return $this->plugin;
	}
	
	public function onRun($currentTick) {
		
		if($this->getPlugin()->status == "enabled") {
			$level = $this->getPlugin()->getServer()->getLevelByName($this->getPlugin()->cfg["World"]);
			
			foreach($this->getPlugin()->getServer()->getOnlinePlayers() as $p) {
				if($this->getPlugin()->config()["Popup"] == true) {
					$p->sendPopup($this->getPlugin()->config()["Popup.Message"]);
					}
		    }
			$this->getPlugin()->secs++;
			
			if($level !== null) {
			$level->dropItem(new Vector3($this->getPlugin()->cfg["Coordinates"]["X"], $this->getPlugin()->cfg["Coordinates"]["Y"], $this->getPlugin()->cfg["Coordinates"]["Z"]), Item::get($this->getPlugin()->getRandomItem(), 0, mt_rand(1, 5)));
			} else {
				$this->getPlugin()->getLogger()->warning("Â§cItems could not be dropped. World doesn't exist.");
			}
		}
		
	    if($this->getPlugin()->secs == $this->getPlugin()->config()["Duration"]) {			
			if($this->getPlugin()->status == "enabled") {
				$this->getPlugin()->getServer()->broadcastMessage($this->getPlugin()->config()["Message.Ended"]);
				$this->getPlugin()->status = "ended";
				$this->getPlugin()->secs = 0;				
				$this->getPlugin()->time = $this->getPlugin()->cfg["Time"];
			}
			}
	}
		
}